$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $var wire 1 0 clk_i_a $end
  $var wire 1 1 we_i_a $end
  $var wire 1 2 en_i_a $end
  $var wire 32 3 data_i_a [31:0] $end
  $var wire 32 4 data_o_a [31:0] $end
  $var wire 32 5 addr_i_a [31:0] $end
  $var wire 1 6 clk_i_b $end
  $var wire 32 7 data_i_b [31:0] $end
  $var wire 32 8 data_o_b [31:0] $end
  $var wire 32 9 addr_i_b [31:0] $end
  $var wire 1 : we_i_b $end
  $var wire 1 ; en_i_b $end
  $scope module ram $end
   $var wire 32 < DATA_WIDTH [31:0] $end
   $var wire 32 < ADDR_WIDTH [31:0] $end
   $var wire 32 = DATA_DEPTH [31:0] $end
   $var wire 1 0 clk_i_a $end
   $var wire 1 1 we_i_a $end
   $var wire 1 2 en_i_a $end
   $var wire 32 3 data_i_a [31:0] $end
   $var wire 32 4 data_o_a [31:0] $end
   $var wire 32 5 addr_i_a [31:0] $end
   $var wire 1 6 clk_i_b $end
   $var wire 32 7 data_i_b [31:0] $end
   $var wire 32 8 data_o_b [31:0] $end
   $var wire 32 9 addr_i_b [31:0] $end
   $var wire 1 : we_i_b $end
   $var wire 1 ; en_i_b $end
   $var wire 32 # data[0] [31:0] $end
   $var wire 32 $ data[1] [31:0] $end
   $var wire 32 % data[2] [31:0] $end
   $var wire 32 & data[3] [31:0] $end
   $var wire 32 ' data[4] [31:0] $end
   $var wire 32 ( data[5] [31:0] $end
   $var wire 32 ) data[6] [31:0] $end
   $var wire 32 * data[7] [31:0] $end
   $var wire 32 + data[8] [31:0] $end
   $var wire 32 , data[9] [31:0] $end
   $var wire 32 - data[10] [31:0] $end
   $var wire 32 . data[11] [31:0] $end
   $var wire 32 / data[12] [31:0] $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000000000000000 #
b00000000000000000000000000000000 $
b00000000000000000000000000000000 %
b00000000000000000000000000000000 &
b00000000000000000000000000000000 '
b00000000000000000000000000000000 (
b00000000000000000000000000000000 )
b00000000000000000000000000000000 *
b00000000000000000000000000000000 +
b00000000000000000000000000000000 ,
b00000000000000000000000000000000 -
b00000000000000000000000000000000 .
b00000000000000000000000000000000 /
10
01
12
b00000000000000000000000000000000 3
b00000000000000000000000000000000 4
b00000000000000000000000000000000 5
16
b00000000000000000000000000000000 7
b00000000000000000000000000000000 8
b00000000000000000000000000000001 9
0:
1;
b00000000000000000000000000100000 <
b00000000000000000010000000000000 =
#1
00
06
#2
b00010011001101110111001100110001 #
b00010011001101110111001100110001 $
10
11
b00010011001101110111001100110001 3
16
b00010011001101110111001100110001 7
1:
#3
00
b00010011001101110111001100110001 4
06
b00010011001101110111001100110001 8
#4
10
01
b00000000000000000000000000000000 3
16
b00000000000000000000000000000000 7
0:
#5
00
06
